
PC_controler_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000062  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000124  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000043c  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003ad  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000246  00000000  00000000  0000093d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000b84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002c4  00000000  00000000  00000bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000046  00000000  00000000  00000e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00000ed2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	0e c0       	rjmp	.+28     	; 0x20 <__bad_interrupt>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	0c c0       	rjmp	.+24     	; 0x20 <__bad_interrupt>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	1d d0       	rcall	.+58     	; 0x58 <main>
  1e:	1f c0       	rjmp	.+62     	; 0x5e <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <init>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/sleep.h>

void init() {
	PORTB = 0x00; // outputs set to HIGH and input set to h-Z
  22:	18 ba       	out	0x18, r1	; 24
	DDRB = 0x1A; // set inputs and outputs (00011010)
  24:	8a e1       	ldi	r24, 0x1A	; 26
  26:	87 bb       	out	0x17, r24	; 23
	ADMUX = 0x00; // ADC multiplexer timer 
  28:	17 b8       	out	0x07, r1	; 7
	ADCSRA = 0x87; // initialize ADC status register
  2a:	87 e8       	ldi	r24, 0x87	; 135
  2c:	86 b9       	out	0x06, r24	; 6
	DIDR0 = 0x01;
  2e:	81 e0       	ldi	r24, 0x01	; 1
  30:	84 bb       	out	0x14, r24	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  32:	8f ec       	ldi	r24, 0xCF	; 207
  34:	97 e0       	ldi	r25, 0x07	; 7
  36:	01 97       	sbiw	r24, 0x01	; 1
  38:	f1 f7       	brne	.-4      	; 0x36 <init+0x14>
  3a:	00 c0       	rjmp	.+0      	; 0x3c <init+0x1a>
  3c:	00 00       	nop
  3e:	08 95       	ret

00000040 <check_battery>:
	_delay_ms(1); // wait until complete write
}

char check_battery() {
	ADCSRA |= (1 << ADSC); // start conversion
  40:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1 << ADSC)); // wait until complete
  42:	36 99       	sbic	0x06, 6	; 6
  44:	fe cf       	rjmp	.-4      	; 0x42 <check_battery+0x2>
	if(ADC >= min_batterie_level) {
  46:	84 b1       	in	r24, 0x04	; 4
  48:	95 b1       	in	r25, 0x05	; 5
  4a:	85 30       	cpi	r24, 0x05	; 5
  4c:	93 40       	sbci	r25, 0x03	; 3
  4e:	10 f4       	brcc	.+4      	; 0x54 <check_battery+0x14>
		return('y');		
	}
	else{
		return('n');
  50:	8e e6       	ldi	r24, 0x6E	; 110
  52:	08 95       	ret

char check_battery() {
	ADCSRA |= (1 << ADSC); // start conversion
	while(ADCSRA & (1 << ADSC)); // wait until complete
	if(ADC >= min_batterie_level) {
		return('y');		
  54:	89 e7       	ldi	r24, 0x79	; 121
	}
	else{
		return('n');
	}
}
  56:	08 95       	ret

00000058 <main>:

int main(void)
{
    init();
  58:	e4 df       	rcall	.-56     	; 0x22 <init>
    while (1) 
    {
		if(check_battery() == 'y') {
  5a:	f2 df       	rcall	.-28     	; 0x40 <check_battery>
  5c:	fe cf       	rjmp	.-4      	; 0x5a <main+0x2>

0000005e <_exit>:
  5e:	f8 94       	cli

00000060 <__stop_program>:
  60:	ff cf       	rjmp	.-2      	; 0x60 <__stop_program>
