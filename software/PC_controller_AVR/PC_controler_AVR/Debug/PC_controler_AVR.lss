
PC_controler_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000392  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000392  00000426  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800074  00800074  0000043a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000043a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000046c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a45  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004c6  00000000  00000000  00000f45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000057d  00000000  00000000  0000140b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00001988  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000034c  00000000  00000000  00001a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007a3  00000000  00000000  00001dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000254f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	39 c0       	rjmp	.+114    	; 0x76 <__vector_1>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	20 c0       	rjmp	.+64     	; 0x48 <__vector_3>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	e2 e9       	ldi	r30, 0x92	; 146
  24:	f3 e0       	ldi	r31, 0x03	; 3
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	a4 37       	cpi	r26, 0x74	; 116
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a4 e7       	ldi	r26, 0x74	; 116
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	ab 38       	cpi	r26, 0x8B	; 139
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	f3 d0       	rcall	.+486    	; 0x22a <main>
  44:	a4 c1       	rjmp	.+840    	; 0x38e <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_3>:
int timeout = 0;
uint8_t message[total_bytes_message];
uint8_t action;

ISR(TIM0_OVF_vect)
{
  48:	1f 92       	push	r1
  4a:	0f 92       	push	r0
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	0f 92       	push	r0
  50:	11 24       	eor	r1, r1
  52:	8f 93       	push	r24
  54:	9f 93       	push	r25
	timeout++;
  56:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
  5a:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__data_end+0x1>
  5e:	01 96       	adiw	r24, 0x01	; 1
  60:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <__data_end+0x1>
  64:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
}
  68:	9f 91       	pop	r25
  6a:	8f 91       	pop	r24
  6c:	0f 90       	pop	r0
  6e:	0f be       	out	0x3f, r0	; 63
  70:	0f 90       	pop	r0
  72:	1f 90       	pop	r1
  74:	18 95       	reti

00000076 <__vector_1>:

ISR(INT0_vect)
{
  76:	1f 92       	push	r1
  78:	0f 92       	push	r0
  7a:	0f b6       	in	r0, 0x3f	; 63
  7c:	0f 92       	push	r0
  7e:	11 24       	eor	r1, r1
  80:	8f 93       	push	r24
	sleep_disable();
  82:	85 b7       	in	r24, 0x35	; 53
  84:	8f 7d       	andi	r24, 0xDF	; 223
  86:	85 bf       	out	0x35, r24	; 53
}
  88:	8f 91       	pop	r24
  8a:	0f 90       	pop	r0
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	0f 90       	pop	r0
  90:	1f 90       	pop	r1
  92:	18 95       	reti

00000094 <init>:

void init() {
	PORTB = 0b0000100; // outputs set to LOW and input set to h-Z
  94:	84 e0       	ldi	r24, 0x04	; 4
  96:	88 bb       	out	0x18, r24	; 24
	DDRB = 0b00011100; // set inputs and outputs
  98:	8c e1       	ldi	r24, 0x1C	; 28
  9a:	87 bb       	out	0x17, r24	; 23
	ADMUX = 0x00; // ADC multiplexer timer 
  9c:	17 b8       	out	0x07, r1	; 7
	ADCSRA = 0x87; // initialize ADC status register
  9e:	87 e8       	ldi	r24, 0x87	; 135
  a0:	86 b9       	out	0x06, r24	; 6
	DIDR0 = 0x01;
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	84 bb       	out	0x14, r24	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	8b e2       	ldi	r24, 0x2B	; 43
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <__stack+0xb>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <__stack+0x11>
  b0:	00 00       	nop
  b2:	08 95       	ret

000000b4 <go_to_sleep>:
	_delay_ms(1); // wait until complete write
}

void go_to_sleep() {
	ADCSRA &= ~(1<<ADEN);
  b4:	37 98       	cbi	0x06, 7	; 6
	MCUCR &= ~(_BV(ISC01) | _BV(ISC00));      //INT0 on low level
  b6:	85 b7       	in	r24, 0x35	; 53
  b8:	8c 7f       	andi	r24, 0xFC	; 252
  ba:	85 bf       	out	0x35, r24	; 53
	GIMSK |= _BV(INT0);                       //enable INT0
  bc:	8b b7       	in	r24, 0x3b	; 59
  be:	80 64       	ori	r24, 0x40	; 64
  c0:	8b bf       	out	0x3b, r24	; 59
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  c2:	85 b7       	in	r24, 0x35	; 53
  c4:	87 7e       	andi	r24, 0xE7	; 231
  c6:	80 61       	ori	r24, 0x10	; 16
  c8:	85 bf       	out	0x35, r24	; 53
	sleep_enable();
  ca:	85 b7       	in	r24, 0x35	; 53
  cc:	80 62       	ori	r24, 0x20	; 32
  ce:	85 bf       	out	0x35, r24	; 53
	sei();
  d0:	78 94       	sei
	sleep_cpu();
  d2:	88 95       	sleep
	cli();
  d4:	f8 94       	cli
	ADCSRA |= (1<<ADEN);
  d6:	37 9a       	sbi	0x06, 7	; 6
  d8:	08 95       	ret

000000da <read_battery_level>:
}

void read_battery_level() {
	ADCSRA |= (1 << ADSC); // start conversion
  da:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1 << ADSC)); // wait until complete
  dc:	36 99       	sbic	0x06, 6	; 6
  de:	fe cf       	rjmp	.-4      	; 0xdc <read_battery_level+0x2>
	return;
}
  e0:	08 95       	ret

000000e2 <HC12_write>:

void HC12_write(uint8_t data) { // send a bytes other HC12
	PORTB = 0b00000000;
  e2:	18 ba       	out	0x18, r1	; 24
	for (int i = 0; i <= 7; i++) {
  e4:	20 e0       	ldi	r18, 0x00	; 0
  e6:	30 e0       	ldi	r19, 0x00	; 0
		_delay_us(175);
		if ( (data & (1<<i)) == 0x00 ){
  e8:	90 e0       	ldi	r25, 0x00	; 0
			PORTB = 0b00000000;
		}
		else {
			PORTB = 0b00000100;
  ea:	64 e0       	ldi	r22, 0x04	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	46 e4       	ldi	r20, 0x46	; 70
  ee:	4a 95       	dec	r20
  f0:	f1 f7       	brne	.-4      	; 0xee <HC12_write+0xc>
  f2:	00 00       	nop

void HC12_write(uint8_t data) { // send a bytes other HC12
	PORTB = 0b00000000;
	for (int i = 0; i <= 7; i++) {
		_delay_us(175);
		if ( (data & (1<<i)) == 0x00 ){
  f4:	ac 01       	movw	r20, r24
  f6:	02 2e       	mov	r0, r18
  f8:	02 c0       	rjmp	.+4      	; 0xfe <HC12_write+0x1c>
  fa:	55 95       	asr	r21
  fc:	47 95       	ror	r20
  fe:	0a 94       	dec	r0
 100:	e2 f7       	brpl	.-8      	; 0xfa <HC12_write+0x18>
 102:	40 fd       	sbrc	r20, 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <HC12_write+0x28>
			PORTB = 0b00000000;
 106:	18 ba       	out	0x18, r1	; 24
 108:	01 c0       	rjmp	.+2      	; 0x10c <HC12_write+0x2a>
		}
		else {
			PORTB = 0b00000100;
 10a:	68 bb       	out	0x18, r22	; 24
	return;
}

void HC12_write(uint8_t data) { // send a bytes other HC12
	PORTB = 0b00000000;
	for (int i = 0; i <= 7; i++) {
 10c:	2f 5f       	subi	r18, 0xFF	; 255
 10e:	3f 4f       	sbci	r19, 0xFF	; 255
 110:	28 30       	cpi	r18, 0x08	; 8
 112:	31 05       	cpc	r19, r1
 114:	59 f7       	brne	.-42     	; 0xec <HC12_write+0xa>
 116:	86 e4       	ldi	r24, 0x46	; 70
 118:	8a 95       	dec	r24
 11a:	f1 f7       	brne	.-4      	; 0x118 <HC12_write+0x36>
 11c:	00 00       	nop
		else {
			PORTB = 0b00000100;
		}
	}
	_delay_us(175);
	PORTB = 0b00000100;
 11e:	84 e0       	ldi	r24, 0x04	; 4
 120:	88 bb       	out	0x18, r24	; 24
 122:	46 e4       	ldi	r20, 0x46	; 70
 124:	4a 95       	dec	r20
 126:	f1 f7       	brne	.-4      	; 0x124 <HC12_write+0x42>
 128:	00 00       	nop
 12a:	08 95       	ret

0000012c <HC12_read>:
	_delay_us(175);
	return;
}

void HC12_read(){
 12c:	ef 92       	push	r14
 12e:	ff 92       	push	r15
 130:	0f 93       	push	r16
 132:	1f 93       	push	r17
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
	int remain_bytes = 0;
	timeout = 0;
 138:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <__data_end+0x1>
 13c:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
	uint8_t value = 0b00000000;
	action = 0x00;
 140:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <action>
}

void HC12_read(){
	int remain_bytes = 0;
	timeout = 0;
	uint8_t value = 0b00000000;
 144:	50 e0       	ldi	r21, 0x00	; 0
	_delay_us(175);
	return;
}

void HC12_read(){
	int remain_bytes = 0;
 146:	a0 e0       	ldi	r26, 0x00	; 0
 148:	b0 e0       	ldi	r27, 0x00	; 0
	timeout = 0;
	uint8_t value = 0b00000000;
	action = 0x00;
	while((timeout <= 5) & (remain_bytes >= 0)){
 14a:	41 e0       	ldi	r20, 0x01	; 1
 14c:	60 e0       	ldi	r22, 0x00	; 0
			for(int index = 0; index <= 7; index++) { // values
				if(PINB & (1<<1)){
					value = value | (1<<index);
				}
				else if( !(PINB & (1<<1) ) ) {
					value = value & ~(1<<index);
 14e:	e1 e0       	ldi	r30, 0x01	; 1
 150:	f0 e0       	ldi	r31, 0x00	; 0
							remain_bytes = total_bytes_message;
						}
					}
					else {
						value = 0x00;
						timeout = 600;
 152:	08 e5       	ldi	r16, 0x58	; 88
 154:	12 e0       	ldi	r17, 0x02	; 2
				//PORTB = 0b00000100;
				
			}
			if(PINB & (1<<1)){ // stop bit
				if(remain_bytes != 0) {
					message[total_bytes_message - remain_bytes] = value;
 156:	0f 2e       	mov	r0, r31
 158:	f4 e1       	ldi	r31, 0x14	; 20
 15a:	ef 2e       	mov	r14, r31
 15c:	f1 2c       	mov	r15, r1
 15e:	f0 2d       	mov	r31, r0
void HC12_read(){
	int remain_bytes = 0;
	timeout = 0;
	uint8_t value = 0b00000000;
	action = 0x00;
	while((timeout <= 5) & (remain_bytes >= 0)){
 160:	4b c0       	rjmp	.+150    	; 0x1f8 <HC12_read+0xcc>
 162:	00 c0       	rjmp	.+0      	; 0x164 <HC12_read+0x38>
		_delay_us(1);
		if( !(PINB & (1<<1)) ) { // start bit
 164:	b1 99       	sbic	0x16, 1	; 22
 166:	4d c0       	rjmp	.+154    	; 0x202 <HC12_read+0xd6>
 168:	20 e7       	ldi	r18, 0x70	; 112
 16a:	2a 95       	dec	r18
 16c:	f1 f7       	brne	.-4      	; 0x16a <HC12_read+0x3e>
			_delay_us(280); // one and half a period
			//PORTB = 0b00000000;
			for(int index = 0; index <= 7; index++) { // values
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	90 e0       	ldi	r25, 0x00	; 0
				if(PINB & (1<<1)){
 172:	b1 9b       	sbis	0x16, 1	; 22
 174:	09 c0       	rjmp	.+18     	; 0x188 <HC12_read+0x5c>
					value = value | (1<<index);
 176:	9f 01       	movw	r18, r30
 178:	08 2e       	mov	r0, r24
 17a:	02 c0       	rjmp	.+4      	; 0x180 <HC12_read+0x54>
 17c:	22 0f       	add	r18, r18
 17e:	33 1f       	adc	r19, r19
 180:	0a 94       	dec	r0
 182:	e2 f7       	brpl	.-8      	; 0x17c <HC12_read+0x50>
 184:	52 2b       	or	r21, r18
 186:	0b c0       	rjmp	.+22     	; 0x19e <HC12_read+0x72>
				}
				else if( !(PINB & (1<<1) ) ) {
 188:	b1 99       	sbic	0x16, 1	; 22
 18a:	09 c0       	rjmp	.+18     	; 0x19e <HC12_read+0x72>
					value = value & ~(1<<index);
 18c:	9f 01       	movw	r18, r30
 18e:	08 2e       	mov	r0, r24
 190:	02 c0       	rjmp	.+4      	; 0x196 <HC12_read+0x6a>
 192:	22 0f       	add	r18, r18
 194:	33 1f       	adc	r19, r19
 196:	0a 94       	dec	r0
 198:	e2 f7       	brpl	.-8      	; 0x192 <HC12_read+0x66>
 19a:	20 95       	com	r18
 19c:	52 23       	and	r21, r18
 19e:	c4 e4       	ldi	r28, 0x44	; 68
 1a0:	ca 95       	dec	r28
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <HC12_read+0x74>
 1a4:	00 00       	nop
	while((timeout <= 5) & (remain_bytes >= 0)){
		_delay_us(1);
		if( !(PINB & (1<<1)) ) { // start bit
			_delay_us(280); // one and half a period
			//PORTB = 0b00000000;
			for(int index = 0; index <= 7; index++) { // values
 1a6:	01 96       	adiw	r24, 0x01	; 1
 1a8:	88 30       	cpi	r24, 0x08	; 8
 1aa:	91 05       	cpc	r25, r1
 1ac:	11 f7       	brne	.-60     	; 0x172 <HC12_read+0x46>
				}
				_delay_us(170); // next bit 4800 HZ
				//PORTB = 0b00000100;
				
			}
			if(PINB & (1<<1)){ // stop bit
 1ae:	b1 9b       	sbis	0x16, 1	; 22
 1b0:	23 c0       	rjmp	.+70     	; 0x1f8 <HC12_read+0xcc>
				if(remain_bytes != 0) {
 1b2:	10 97       	sbiw	r26, 0x00	; 0
 1b4:	51 f0       	breq	.+20     	; 0x1ca <HC12_read+0x9e>
					message[total_bytes_message - remain_bytes] = value;
 1b6:	c7 01       	movw	r24, r14
 1b8:	8a 1b       	sub	r24, r26
 1ba:	9b 0b       	sbc	r25, r27
 1bc:	8a 58       	subi	r24, 0x8A	; 138
 1be:	9f 4f       	sbci	r25, 0xFF	; 255
 1c0:	ec 01       	movw	r28, r24
 1c2:	58 83       	st	Y, r21
					value = 0x00;
					remain_bytes--;
 1c4:	11 97       	sbiw	r26, 0x01	; 1
				
			}
			if(PINB & (1<<1)){ // stop bit
				if(remain_bytes != 0) {
					message[total_bytes_message - remain_bytes] = value;
					value = 0x00;
 1c6:	50 e0       	ldi	r21, 0x00	; 0
 1c8:	17 c0       	rjmp	.+46     	; 0x1f8 <HC12_read+0xcc>
					remain_bytes--;
				}
				else {
					if (action == 0x00) {
 1ca:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <action>
 1ce:	81 11       	cpse	r24, r1
 1d0:	0a c0       	rjmp	.+20     	; 0x1e6 <HC12_read+0xba>
						action = value;
 1d2:	50 93 8a 00 	sts	0x008A, r21	; 0x80008a <action>
						value = 0x00;
						if (action == 0x62){
 1d6:	52 36       	cpi	r21, 0x62	; 98
 1d8:	61 f4       	brne	.+24     	; 0x1f2 <HC12_read+0xc6>
							timeout = 600; // this is a battery level request
 1da:	10 93 75 00 	sts	0x0075, r17	; 0x800075 <__data_end+0x1>
 1de:	00 93 74 00 	sts	0x0074, r16	; 0x800074 <__data_end>
					remain_bytes--;
				}
				else {
					if (action == 0x00) {
						action = value;
						value = 0x00;
 1e2:	50 e0       	ldi	r21, 0x00	; 0
 1e4:	09 c0       	rjmp	.+18     	; 0x1f8 <HC12_read+0xcc>
							remain_bytes = total_bytes_message;
						}
					}
					else {
						value = 0x00;
						timeout = 600;
 1e6:	10 93 75 00 	sts	0x0075, r17	; 0x800075 <__data_end+0x1>
 1ea:	00 93 74 00 	sts	0x0074, r16	; 0x800074 <__data_end>
						else {
							remain_bytes = total_bytes_message;
						}
					}
					else {
						value = 0x00;
 1ee:	50 e0       	ldi	r21, 0x00	; 0
 1f0:	03 c0       	rjmp	.+6      	; 0x1f8 <HC12_read+0xcc>
					remain_bytes--;
				}
				else {
					if (action == 0x00) {
						action = value;
						value = 0x00;
 1f2:	50 e0       	ldi	r21, 0x00	; 0
						if (action == 0x62){
							timeout = 600; // this is a battery level request
						}
						else {
							remain_bytes = total_bytes_message;
 1f4:	a4 e1       	ldi	r26, 0x14	; 20
 1f6:	b0 e0       	ldi	r27, 0x00	; 0
void HC12_read(){
	int remain_bytes = 0;
	timeout = 0;
	uint8_t value = 0b00000000;
	action = 0x00;
	while((timeout <= 5) & (remain_bytes >= 0)){
 1f8:	9b 2f       	mov	r25, r27
 1fa:	90 95       	com	r25
 1fc:	99 1f       	adc	r25, r25
 1fe:	99 27       	eor	r25, r25
 200:	99 1f       	adc	r25, r25
 202:	84 2f       	mov	r24, r20
 204:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <__data_end>
 208:	30 91 75 00 	lds	r19, 0x0075	; 0x800075 <__data_end+0x1>
 20c:	26 30       	cpi	r18, 0x06	; 6
 20e:	31 05       	cpc	r19, r1
 210:	0c f0       	brlt	.+2      	; 0x214 <HC12_read+0xe8>
 212:	86 2f       	mov	r24, r22
 214:	88 23       	and	r24, r24
 216:	11 f0       	breq	.+4      	; 0x21c <HC12_read+0xf0>
 218:	91 11       	cpse	r25, r1
 21a:	a3 cf       	rjmp	.-186    	; 0x162 <HC12_read+0x36>
			else{
				// error
			}
		}
	}
}
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	1f 91       	pop	r17
 222:	0f 91       	pop	r16
 224:	ff 90       	pop	r15
 226:	ef 90       	pop	r14
 228:	08 95       	ret

0000022a <main>:

int main(void)
{
    init();
 22a:	34 df       	rcall	.-408    	; 0x94 <init>
 22c:	ca e8       	ldi	r28, 0x8A	; 138
 22e:	d0 e0       	ldi	r29, 0x00	; 0
			else {
				_delay_ms(100);
				HC12_write(0x6b);
			}
		} 	
		else if (action == 0x72) {
 230:	ff 24       	eor	r15, r15
 232:	f3 94       	inc	r15
			uint8_t checked = 0x01;
			for (int k = 0; k < total_bytes_message; k++) {
				if (message[k] != key[k]) {
					checked = 0x00;
 234:	00 e0       	ldi	r16, 0x00	; 0
				}
			}
			if (checked == 0x01) {
				PORTB = 0b00010100; // PB4 ON = reset switch and HC12 off
 236:	0f 2e       	mov	r0, r31
 238:	f4 e1       	ldi	r31, 0x14	; 20
 23a:	cf 2e       	mov	r12, r31
 23c:	f0 2d       	mov	r31, r0
				_delay_ms(500);
				PORTB = 0b00000100; // all off
 23e:	68 94       	set
 240:	ee 24       	eor	r14, r14
 242:	e2 f8       	bld	r14, 2
		} 	
		else if (action == 0x72) {
			uint8_t checked = 0x01;
			for (int k = 0; k < total_bytes_message; k++) {
				if (message[k] != key[k]) {
					checked = 0x00;
 244:	10 2f       	mov	r17, r16
				if (message[k] != key[k]) {
					checked = 0x00;
				}
			}
			if (checked == 0x01) {
				PORTB = 0b00001100; // PB3 ON = power switch and HC12 off
 246:	0f 2e       	mov	r0, r31
 248:	fc e0       	ldi	r31, 0x0C	; 12
 24a:	df 2e       	mov	r13, r31
 24c:	f0 2d       	mov	r31, r0
int main(void)
{
    init();
    while (1) 
    {
		go_to_sleep();
 24e:	32 df       	rcall	.-412    	; 0xb4 <go_to_sleep>
		MCUCR = 0b00000000;      //INT0 on low level
 250:	15 be       	out	0x35, r1	; 53
		GIMSK = 0b00000000;
 252:	1b be       	out	0x3b, r1	; 59
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 254:	2f e5       	ldi	r18, 0x5F	; 95
 256:	8a ee       	ldi	r24, 0xEA	; 234
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	21 50       	subi	r18, 0x01	; 1
 25c:	80 40       	sbci	r24, 0x00	; 0
 25e:	90 40       	sbci	r25, 0x00	; 0
 260:	e1 f7       	brne	.-8      	; 0x25a <main+0x30>
 262:	00 c0       	rjmp	.+0      	; 0x264 <main+0x3a>
 264:	00 00       	nop
		_delay_ms(250); // wait until before new complete message
		timeout = 0;
 266:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <__data_end+0x1>
 26a:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
		TCCR0B |= _BV(CS02)|_BV(CS00); // set prescaler to 1024 (CLK=1200000Hz/1024/256=4Hz, 0.25s)
 26e:	83 b7       	in	r24, 0x33	; 51
 270:	85 60       	ori	r24, 0x05	; 5
 272:	83 bf       	out	0x33, r24	; 51
		TIMSK0 |= _BV(TOIE0); // enable Timer Overflow interrupt
 274:	89 b7       	in	r24, 0x39	; 57
 276:	82 60       	ori	r24, 0x02	; 2
 278:	89 bf       	out	0x39, r24	; 57
		sei(); // enable global interrupts
 27a:	78 94       	sei
		HC12_read();
 27c:	57 df       	rcall	.-338    	; 0x12c <HC12_read>
		//HC12_write(action);
		/*for (int i = 0; i < 30; i++) {
			HC12_write(message[i]);
			//HC12_write(key[i]);
		}*/			
		if (action == 0x70) {
 27e:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <action>
 282:	80 37       	cpi	r24, 0x70	; 112
 284:	59 f5       	brne	.+86     	; 0x2dc <main+0xb2>
 286:	e6 e7       	ldi	r30, 0x76	; 118
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	a0 e6       	ldi	r26, 0x60	; 96
 28c:	b0 e0       	ldi	r27, 0x00	; 0
 28e:	2f 2d       	mov	r18, r15
			uint8_t checked = 0x01;
			for (int k = 0; k < total_bytes_message; k++) {
				if (message[k] != key[k]) {
 290:	91 91       	ld	r25, Z+
 292:	8d 91       	ld	r24, X+
 294:	98 13       	cpse	r25, r24
					checked = 0x00;
 296:	21 2f       	mov	r18, r17
			HC12_write(message[i]);
			//HC12_write(key[i]);
		}*/			
		if (action == 0x70) {
			uint8_t checked = 0x01;
			for (int k = 0; k < total_bytes_message; k++) {
 298:	ce 17       	cp	r28, r30
 29a:	df 07       	cpc	r29, r31
 29c:	c9 f7       	brne	.-14     	; 0x290 <main+0x66>
				if (message[k] != key[k]) {
					checked = 0x00;
				}
			}
			if (checked == 0x01) {
 29e:	21 30       	cpi	r18, 0x01	; 1
 2a0:	a1 f4       	brne	.+40     	; 0x2ca <main+0xa0>
				PORTB = 0b00001100; // PB3 ON = power switch and HC12 off
 2a2:	d8 ba       	out	0x18, r13	; 24
 2a4:	2f eb       	ldi	r18, 0xBF	; 191
 2a6:	84 ed       	ldi	r24, 0xD4	; 212
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	21 50       	subi	r18, 0x01	; 1
 2ac:	80 40       	sbci	r24, 0x00	; 0
 2ae:	90 40       	sbci	r25, 0x00	; 0
 2b0:	e1 f7       	brne	.-8      	; 0x2aa <main+0x80>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <main+0x8a>
 2b4:	00 00       	nop
				_delay_ms(500);
				PORTB = 0b00000100; // all off
 2b6:	e8 ba       	out	0x18, r14	; 24
 2b8:	8f e2       	ldi	r24, 0x2F	; 47
 2ba:	95 e7       	ldi	r25, 0x75	; 117
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <main+0x92>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <main+0x98>
 2c2:	00 00       	nop
				_delay_ms(100);
				HC12_write(0x6f);
 2c4:	8f e6       	ldi	r24, 0x6F	; 111
 2c6:	0d df       	rcall	.-486    	; 0xe2 <HC12_write>
 2c8:	5f c0       	rjmp	.+190    	; 0x388 <main+0x15e>
 2ca:	8f e2       	ldi	r24, 0x2F	; 47
 2cc:	95 e7       	ldi	r25, 0x75	; 117
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <main+0xa4>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <main+0xaa>
 2d4:	00 00       	nop
			}
			else {
				_delay_ms(100);
				HC12_write(0x6b);
 2d6:	8b e6       	ldi	r24, 0x6B	; 107
 2d8:	04 df       	rcall	.-504    	; 0xe2 <HC12_write>
 2da:	56 c0       	rjmp	.+172    	; 0x388 <main+0x15e>
			}
		} 	
		else if (action == 0x72) {
 2dc:	82 37       	cpi	r24, 0x72	; 114
 2de:	59 f5       	brne	.+86     	; 0x336 <main+0x10c>
 2e0:	e6 e7       	ldi	r30, 0x76	; 118
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	a0 e6       	ldi	r26, 0x60	; 96
 2e6:	b0 e0       	ldi	r27, 0x00	; 0
 2e8:	2f 2d       	mov	r18, r15
			uint8_t checked = 0x01;
			for (int k = 0; k < total_bytes_message; k++) {
				if (message[k] != key[k]) {
 2ea:	91 91       	ld	r25, Z+
 2ec:	8d 91       	ld	r24, X+
 2ee:	98 13       	cpse	r25, r24
					checked = 0x00;
 2f0:	21 2f       	mov	r18, r17
				HC12_write(0x6b);
			}
		} 	
		else if (action == 0x72) {
			uint8_t checked = 0x01;
			for (int k = 0; k < total_bytes_message; k++) {
 2f2:	ec 17       	cp	r30, r28
 2f4:	fd 07       	cpc	r31, r29
 2f6:	c9 f7       	brne	.-14     	; 0x2ea <main+0xc0>
				if (message[k] != key[k]) {
					checked = 0x00;
				}
			}
			if (checked == 0x01) {
 2f8:	21 30       	cpi	r18, 0x01	; 1
 2fa:	a1 f4       	brne	.+40     	; 0x324 <main+0xfa>
				PORTB = 0b00010100; // PB4 ON = reset switch and HC12 off
 2fc:	c8 ba       	out	0x18, r12	; 24
 2fe:	9f eb       	ldi	r25, 0xBF	; 191
 300:	24 ed       	ldi	r18, 0xD4	; 212
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	91 50       	subi	r25, 0x01	; 1
 306:	20 40       	sbci	r18, 0x00	; 0
 308:	80 40       	sbci	r24, 0x00	; 0
 30a:	e1 f7       	brne	.-8      	; 0x304 <main+0xda>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <main+0xe4>
 30e:	00 00       	nop
				_delay_ms(500);
				PORTB = 0b00000100; // all off
 310:	e8 ba       	out	0x18, r14	; 24
 312:	8f e2       	ldi	r24, 0x2F	; 47
 314:	95 e7       	ldi	r25, 0x75	; 117
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	f1 f7       	brne	.-4      	; 0x316 <main+0xec>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <main+0xf2>
 31c:	00 00       	nop
				_delay_ms(100);
				HC12_write(0x6f);
 31e:	8f e6       	ldi	r24, 0x6F	; 111
 320:	e0 de       	rcall	.-576    	; 0xe2 <HC12_write>
 322:	32 c0       	rjmp	.+100    	; 0x388 <main+0x15e>
 324:	8f e2       	ldi	r24, 0x2F	; 47
 326:	95 e7       	ldi	r25, 0x75	; 117
 328:	01 97       	sbiw	r24, 0x01	; 1
 32a:	f1 f7       	brne	.-4      	; 0x328 <main+0xfe>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <main+0x104>
 32e:	00 00       	nop
			}
			else {
				_delay_ms(100);
				HC12_write(0x6b);
 330:	8b e6       	ldi	r24, 0x6B	; 107
 332:	d7 de       	rcall	.-594    	; 0xe2 <HC12_write>
 334:	29 c0       	rjmp	.+82     	; 0x388 <main+0x15e>
			}
		}	
		else if (action == 0x62) {
 336:	82 36       	cpi	r24, 0x62	; 98
 338:	71 f4       	brne	.+28     	; 0x356 <main+0x12c>
			read_battery_level();
 33a:	cf de       	rcall	.-610    	; 0xda <read_battery_level>
 33c:	8f e2       	ldi	r24, 0x2F	; 47
 33e:	95 e7       	ldi	r25, 0x75	; 117
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <main+0x116>
 344:	00 c0       	rjmp	.+0      	; 0x346 <main+0x11c>
 346:	00 00       	nop
			_delay_ms(100);
			HC12_write(0x62);
 348:	82 e6       	ldi	r24, 0x62	; 98
 34a:	cb de       	rcall	.-618    	; 0xe2 <HC12_write>
			HC12_write(ADCH);
 34c:	85 b1       	in	r24, 0x05	; 5
 34e:	c9 de       	rcall	.-622    	; 0xe2 <HC12_write>
			HC12_write(ADCL);
 350:	84 b1       	in	r24, 0x04	; 4
 352:	c7 de       	rcall	.-626    	; 0xe2 <HC12_write>
 354:	19 c0       	rjmp	.+50     	; 0x388 <main+0x15e>
 356:	8f e2       	ldi	r24, 0x2F	; 47
 358:	95 e7       	ldi	r25, 0x75	; 117
 35a:	01 97       	sbiw	r24, 0x01	; 1
 35c:	f1 f7       	brne	.-4      	; 0x35a <main+0x130>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <main+0x136>
 360:	00 00       	nop
		}	
		else {
			_delay_ms(100);
			HC12_write(0x61);
 362:	81 e6       	ldi	r24, 0x61	; 97
 364:	be de       	rcall	.-644    	; 0xe2 <HC12_write>
 366:	10 c0       	rjmp	.+32     	; 0x388 <main+0x15e>
		}
		// reset all values	
		for(int i = 0; i < total_bytes_message; i++) { // reset of message buffer
			message[i] = 0x00;
 368:	11 92       	st	Z+, r1
		else {
			_delay_ms(100);
			HC12_write(0x61);
		}
		// reset all values	
		for(int i = 0; i < total_bytes_message; i++) { // reset of message buffer
 36a:	ec 17       	cp	r30, r28
 36c:	fd 07       	cpc	r31, r29
 36e:	e1 f7       	brne	.-8      	; 0x368 <main+0x13e>
			message[i] = 0x00;
		}
		action = 0x00;
 370:	00 93 8a 00 	sts	0x008A, r16	; 0x80008a <action>
 374:	9f e5       	ldi	r25, 0x5F	; 95
 376:	2a ee       	ldi	r18, 0xEA	; 234
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	91 50       	subi	r25, 0x01	; 1
 37c:	20 40       	sbci	r18, 0x00	; 0
 37e:	80 40       	sbci	r24, 0x00	; 0
 380:	e1 f7       	brne	.-8      	; 0x37a <main+0x150>
 382:	00 c0       	rjmp	.+0      	; 0x384 <main+0x15a>
 384:	00 00       	nop
 386:	63 cf       	rjmp	.-314    	; 0x24e <main+0x24>
 388:	e6 e7       	ldi	r30, 0x76	; 118
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	ed cf       	rjmp	.-38     	; 0x368 <main+0x13e>

0000038e <_exit>:
 38e:	f8 94       	cli

00000390 <__stop_program>:
 390:	ff cf       	rjmp	.-2      	; 0x390 <__stop_program>
