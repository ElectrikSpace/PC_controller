
PC_controler_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000246  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  00800060  00800060  00000246  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007f0  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004a5  00000000  00000000  00000afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003cf  00000000  00000000  00000fa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  00001370  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000348  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000036e  00000000  00000000  00001770  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001ade  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	39 c0       	rjmp	.+114    	; 0x76 <__vector_1>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	20 c0       	rjmp	.+64     	; 0x48 <__vector_3>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	e2 ed       	ldi	r30, 0xD2	; 210
  24:	f1 e0       	ldi	r31, 0x01	; 1
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	a0 36       	cpi	r26, 0x60	; 96
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a3 38       	cpi	r26, 0x83	; 131
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	7e d0       	rcall	.+252    	; 0x140 <main>
  44:	c4 c0       	rjmp	.+392    	; 0x1ce <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_3>:
int timeout = 0;
uint8_t message[total_bytes_message] = {0};
uint8_t action;

ISR(TIM0_OVF_vect)
{
  48:	1f 92       	push	r1
  4a:	0f 92       	push	r0
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	0f 92       	push	r0
  50:	11 24       	eor	r1, r1
  52:	8f 93       	push	r24
  54:	9f 93       	push	r25
	timeout+=1;
  56:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <timeout>
  5a:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <timeout+0x1>
  5e:	01 96       	adiw	r24, 0x01	; 1
  60:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <timeout+0x1>
  64:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <timeout>
}
  68:	9f 91       	pop	r25
  6a:	8f 91       	pop	r24
  6c:	0f 90       	pop	r0
  6e:	0f be       	out	0x3f, r0	; 63
  70:	0f 90       	pop	r0
  72:	1f 90       	pop	r1
  74:	18 95       	reti

00000076 <__vector_1>:

ISR(INT0_vect)
{
  76:	1f 92       	push	r1
  78:	0f 92       	push	r0
  7a:	0f b6       	in	r0, 0x3f	; 63
  7c:	0f 92       	push	r0
  7e:	11 24       	eor	r1, r1
  80:	8f 93       	push	r24
	sleep_disable();
  82:	85 b7       	in	r24, 0x35	; 53
  84:	8f 7d       	andi	r24, 0xDF	; 223
  86:	85 bf       	out	0x35, r24	; 53
}
  88:	8f 91       	pop	r24
  8a:	0f 90       	pop	r0
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	0f 90       	pop	r0
  90:	1f 90       	pop	r1
  92:	18 95       	reti

00000094 <init>:

void init() {
	PORTB = 0b0000100; // outputs set to LOW and input set to h-Z
  94:	84 e0       	ldi	r24, 0x04	; 4
  96:	88 bb       	out	0x18, r24	; 24
	DDRB = 0b00011100; // set inputs and outputs
  98:	8c e1       	ldi	r24, 0x1C	; 28
  9a:	87 bb       	out	0x17, r24	; 23
	ADMUX = 0x00; // ADC multiplexer timer 
  9c:	17 b8       	out	0x07, r1	; 7
	ADCSRA = 0x87; // initialize ADC status register
  9e:	87 e8       	ldi	r24, 0x87	; 135
  a0:	86 b9       	out	0x06, r24	; 6
	DIDR0 = 0x01;
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	84 bb       	out	0x14, r24	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	8b e2       	ldi	r24, 0x2B	; 43
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <__stack+0xb>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <__stack+0x11>
  b0:	00 00       	nop
  b2:	08 95       	ret

000000b4 <go_to_sleep>:
	_delay_ms(1); // wait until complete write
}

void go_to_sleep() {
	ADCSRA &= ~(1<<ADEN);
  b4:	37 98       	cbi	0x06, 7	; 6
	MCUCR &= ~(_BV(ISC01) | _BV(ISC00));      //INT0 on low level
  b6:	85 b7       	in	r24, 0x35	; 53
  b8:	8c 7f       	andi	r24, 0xFC	; 252
  ba:	85 bf       	out	0x35, r24	; 53
	GIMSK |= _BV(INT0);                       //enable INT0
  bc:	8b b7       	in	r24, 0x3b	; 59
  be:	80 64       	ori	r24, 0x40	; 64
  c0:	8b bf       	out	0x3b, r24	; 59
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  c2:	85 b7       	in	r24, 0x35	; 53
  c4:	87 7e       	andi	r24, 0xE7	; 231
  c6:	80 61       	ori	r24, 0x10	; 16
  c8:	85 bf       	out	0x35, r24	; 53
	sleep_enable();
  ca:	85 b7       	in	r24, 0x35	; 53
  cc:	80 62       	ori	r24, 0x20	; 32
  ce:	85 bf       	out	0x35, r24	; 53
	sei();
  d0:	78 94       	sei
	sleep_cpu();
  d2:	88 95       	sleep
	cli();
  d4:	f8 94       	cli
	ADCSRA |= (1<<ADEN);
  d6:	37 9a       	sbi	0x06, 7	; 6
  d8:	08 95       	ret

000000da <read_battery_level>:
}

void read_battery_level() {
	ADCSRA |= (1 << ADSC); // start conversion
  da:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1 << ADSC)); // wait until complete
  dc:	36 99       	sbic	0x06, 6	; 6
  de:	fe cf       	rjmp	.-4      	; 0xdc <read_battery_level+0x2>
	return;
}
  e0:	08 95       	ret

000000e2 <HC12_write>:

void HC12_write(uint8_t data) { // send a bytes other HC12
	PORTB = 0b00000000;
  e2:	18 ba       	out	0x18, r1	; 24
	for (int i = 7; i >= 0; i--) {
  e4:	27 e0       	ldi	r18, 0x07	; 7
  e6:	30 e0       	ldi	r19, 0x00	; 0
		_delay_us(200);
		if ( (data & (1<<i)) == 0x00 ){
  e8:	90 e0       	ldi	r25, 0x00	; 0
			PORTB = 0b00000000;
		}
		else {
			PORTB = 0b00000100;
  ea:	64 e0       	ldi	r22, 0x04	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	40 e5       	ldi	r20, 0x50	; 80
  ee:	4a 95       	dec	r20
  f0:	f1 f7       	brne	.-4      	; 0xee <HC12_write+0xc>
  f2:	00 00       	nop

void HC12_write(uint8_t data) { // send a bytes other HC12
	PORTB = 0b00000000;
	for (int i = 7; i >= 0; i--) {
		_delay_us(200);
		if ( (data & (1<<i)) == 0x00 ){
  f4:	ac 01       	movw	r20, r24
  f6:	02 2e       	mov	r0, r18
  f8:	02 c0       	rjmp	.+4      	; 0xfe <HC12_write+0x1c>
  fa:	55 95       	asr	r21
  fc:	47 95       	ror	r20
  fe:	0a 94       	dec	r0
 100:	e2 f7       	brpl	.-8      	; 0xfa <HC12_write+0x18>
 102:	40 fd       	sbrc	r20, 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <HC12_write+0x28>
			PORTB = 0b00000000;
 106:	18 ba       	out	0x18, r1	; 24
 108:	01 c0       	rjmp	.+2      	; 0x10c <HC12_write+0x2a>
		}
		else {
			PORTB = 0b00000100;
 10a:	68 bb       	out	0x18, r22	; 24
	return;
}

void HC12_write(uint8_t data) { // send a bytes other HC12
	PORTB = 0b00000000;
	for (int i = 7; i >= 0; i--) {
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	31 09       	sbc	r19, r1
 110:	68 f7       	brcc	.-38     	; 0xec <HC12_write+0xa>
 112:	80 e5       	ldi	r24, 0x50	; 80
 114:	8a 95       	dec	r24
 116:	f1 f7       	brne	.-4      	; 0x114 <HC12_write+0x32>
 118:	00 00       	nop
		else {
			PORTB = 0b00000100;
		}
	}
	_delay_us(200);
	PORTB = 0b00000100;
 11a:	84 e0       	ldi	r24, 0x04	; 4
 11c:	88 bb       	out	0x18, r24	; 24
 11e:	40 e5       	ldi	r20, 0x50	; 80
 120:	4a 95       	dec	r20
 122:	f1 f7       	brne	.-4      	; 0x120 <HC12_write+0x3e>
 124:	00 00       	nop
 126:	08 95       	ret

00000128 <HC12_read>:
	_delay_us(200);
}

void HC12_read(){
	timeout = 0;
 128:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <timeout+0x1>
 12c:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <timeout>
	TCCR0B |= _BV(CS02)|_BV(CS00); // set prescaler to 1024 (CLK=1200000Hz/1024/256=4Hz, 0.25s)
 130:	83 b7       	in	r24, 0x33	; 51
 132:	85 60       	ori	r24, 0x05	; 5
 134:	83 bf       	out	0x33, r24	; 51
	TIMSK0 |= _BV(TOIE0); // enable Timer Overflow interrupt
 136:	89 b7       	in	r24, 0x39	; 57
 138:	82 60       	ori	r24, 0x02	; 2
 13a:	89 bf       	out	0x39, r24	; 57
	sei(); // enable global interrupts
 13c:	78 94       	sei
 13e:	08 95       	ret

00000140 <main>:
	}
}

int main(void)
{
    init();
 140:	a9 df       	rcall	.-174    	; 0x94 <init>
 142:	ce e7       	ldi	r28, 0x7E	; 126
 144:	d0 e0       	ldi	r29, 0x00	; 0
    while (1) 
    {
		go_to_sleep();
 146:	b6 df       	rcall	.-148    	; 0xb4 <go_to_sleep>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 148:	2f e5       	ldi	r18, 0x5F	; 95
 14a:	8a ee       	ldi	r24, 0xEA	; 234
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	80 40       	sbci	r24, 0x00	; 0
 152:	90 40       	sbci	r25, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <main+0xe>
 156:	00 c0       	rjmp	.+0      	; 0x158 <main+0x18>
 158:	00 00       	nop
		_delay_ms(250); // wait until before new complete message
		HC12_write(0x01);
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	c2 df       	rcall	.-124    	; 0xe2 <HC12_write>
		HC12_read(); 
 15e:	e4 df       	rcall	.-56     	; 0x128 <HC12_read>
		if (action == 0x01) {
 160:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <action>
 164:	81 30       	cpi	r24, 0x01	; 1
 166:	49 f4       	brne	.+18     	; 0x17a <main+0x3a>
 168:	8f e2       	ldi	r24, 0x2F	; 47
 16a:	95 e7       	ldi	r25, 0x75	; 117
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <main+0x2c>
 170:	00 c0       	rjmp	.+0      	; 0x172 <main+0x32>
 172:	00 00       	nop
				_delay_ms(100);
				HC12_write(0x05);
			}
			else {
				_delay_ms(100);
				HC12_write(0x04);
 174:	84 e0       	ldi	r24, 0x04	; 4
 176:	b5 df       	rcall	.-150    	; 0xe2 <HC12_write>
 178:	27 c0       	rjmp	.+78     	; 0x1c8 <main+0x88>
			}
		} 	
		else if (action == 0x02) {
 17a:	82 30       	cpi	r24, 0x02	; 2
 17c:	49 f4       	brne	.+18     	; 0x190 <main+0x50>
 17e:	8f e2       	ldi	r24, 0x2F	; 47
 180:	95 e7       	ldi	r25, 0x75	; 117
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <main+0x42>
 186:	00 c0       	rjmp	.+0      	; 0x188 <main+0x48>
 188:	00 00       	nop
				_delay_ms(100);
				HC12_write(0x05);
			}
			else {
				_delay_ms(100);
				HC12_write(0x04);
 18a:	84 e0       	ldi	r24, 0x04	; 4
 18c:	aa df       	rcall	.-172    	; 0xe2 <HC12_write>
 18e:	1c c0       	rjmp	.+56     	; 0x1c8 <main+0x88>
			}
		}	
		else if (action == 0x03) {
 190:	83 30       	cpi	r24, 0x03	; 3
 192:	61 f4       	brne	.+24     	; 0x1ac <main+0x6c>
			read_battery_level();
 194:	a2 df       	rcall	.-188    	; 0xda <read_battery_level>
 196:	8f e2       	ldi	r24, 0x2F	; 47
 198:	95 e7       	ldi	r25, 0x75	; 117
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <main+0x5a>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <main+0x60>
 1a0:	00 00       	nop
			_delay_ms(100);
			HC12_write(ADCH);
 1a2:	85 b1       	in	r24, 0x05	; 5
 1a4:	9e df       	rcall	.-196    	; 0xe2 <HC12_write>
			HC12_write(ADCL);
 1a6:	84 b1       	in	r24, 0x04	; 4
 1a8:	9c df       	rcall	.-200    	; 0xe2 <HC12_write>
 1aa:	0e c0       	rjmp	.+28     	; 0x1c8 <main+0x88>
 1ac:	8f e2       	ldi	r24, 0x2F	; 47
 1ae:	95 e7       	ldi	r25, 0x75	; 117
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <main+0x70>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0x76>
 1b6:	00 00       	nop
		}	
		else {
			_delay_ms(100);
			HC12_write(0x03);
 1b8:	83 e0       	ldi	r24, 0x03	; 3
 1ba:	93 df       	rcall	.-218    	; 0xe2 <HC12_write>
 1bc:	05 c0       	rjmp	.+10     	; 0x1c8 <main+0x88>
		}	
		for(int i = 0; i < total_bytes_message; i++) { // reset of message buffer
			message[i] = 0x00;
 1be:	11 92       	st	Z+, r1
		}	
		else {
			_delay_ms(100);
			HC12_write(0x03);
		}	
		for(int i = 0; i < total_bytes_message; i++) { // reset of message buffer
 1c0:	ec 17       	cp	r30, r28
 1c2:	fd 07       	cpc	r31, r29
 1c4:	e1 f7       	brne	.-8      	; 0x1be <main+0x7e>
 1c6:	bf cf       	rjmp	.-130    	; 0x146 <main+0x6>
 1c8:	e0 e6       	ldi	r30, 0x60	; 96
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	f8 cf       	rjmp	.-16     	; 0x1be <main+0x7e>

000001ce <_exit>:
 1ce:	f8 94       	cli

000001d0 <__stop_program>:
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <__stop_program>
